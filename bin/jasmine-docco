#!/usr/bin/env node

require('shelljs/global');

var fs = require('fs');
var path = require('path');
var commander = require('commander');
var docco = require('docco');
var cheerio = require('cheerio');
var args = require('minimist')(process.argv.slice(2));

var root = __dirname + '/../';

var files = args._;

var docs = 'build/docco-out/';
var docsIndex = 'build/docco-out-index/';
var publicDir = 'build/public/';

mkdir('-p', docs);

mkdir('-p', publicDir);

function jasminize() {
    files.forEach(function (file) {
        var ext = path.extname(file);
        var specName = path.basename(file, ext);
        var specFile = path.basename(file);
        // Instrument the the docco output with the Jasmine runner
        var $ = cheerio.load(fs.readFileSync(docs + specName + '.html'));

        // Spec to run
        $('head').append('<script src="' + specFile + '"></script>');

        $('#before-sections').replaceWith('<p><a href="#jasmine-results"><strong>Jasmine Report</strong></a> <span id="jasmine-results-status"></span></p>');
        $('#after-sections').replaceWith('<span id="jasmine-results" />');

        fs.writeFileSync(publicDir + specName + '.html', $.html());
        cp(file, publicDir + specFile);
    });
};

docco.document({
    args: files,
    output: docs,
    template: root + '/jasmine-docco.jst',
    css: '?' // Supresses warning
}, jasminize);

if (args.i) {
    docco.document({
        args: ['README.md'].concat(files),
        output: docsIndex,
        template: root + '/index.jst',
        css: '?' // Supresses warning
    }, function () {
        var $ = cheerio.load(fs.readFileSync(docsIndex + 'README.html'));
        $('.toc ol li').first().remove();
        fs.writeFileSync(publicDir +  'index.html', $.html());
    });
}

// Add resources to public dir
cp('-R', root + '/public/*', publicDir);
